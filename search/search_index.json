{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"simsity \u00b6 simsity: it's all about the neighborhood Simsity is a Super Simple Similarities Service. This repository contains simple tools to help in similarity retreival scenarios. Typical usecases include early stage bulk labelling and duplication discovery.","title":"Home"},{"location":"#simsity","text":"simsity: it's all about the neighborhood Simsity is a Super Simple Similarities Service. This repository contains simple tools to help in similarity retreival scenarios. Typical usecases include early stage bulk labelling and duplication discovery.","title":"simsity"},{"location":"api/datasets/","text":"from simsity.datasets import fetch_clinc \u00b6 Loads the clinc conversational intents data. Usage: from simsity.datasets import fetch_clinc fetch_clinc () from simsity.datasets import fetch_voters \u00b6 Loads the voters dataset. Usage: from simsity.datasets import fetch_voters fetch_voters ()","title":"simsity.datasets"},{"location":"api/datasets/#from-simsitydatasets-import-fetch_clinc","text":"Loads the clinc conversational intents data. Usage: from simsity.datasets import fetch_clinc fetch_clinc ()","title":"from simsity.datasets import fetch_clinc"},{"location":"api/datasets/#from-simsitydatasets-import-fetch_voters","text":"Loads the voters dataset. Usage: from simsity.datasets import fetch_voters fetch_voters ()","title":"from simsity.datasets import fetch_voters"},{"location":"api/indexer/","text":"simsity.indexer.PyNNDescentIndexer \u00b6 An indexer based on PyNNDescent. Parameters Name Type Description Default metric The metric to use for the index. 'euclidean' n_neighbors The number of neighbors to use for the index. 10 Usage: from simsity.indexer import PyNNDescentIndexer indexer = PyNNDescentIndexer ( metric = \"euclidean\" , n_neighbors = 10 ) index ( self , data ) \u00b6 Show source code in indexer/pynn.py 26 27 28 29 30 31 32 33 34 def index ( self , data ): \"\"\" Index the given data. Arguments: data: The data to index. \"\"\" self . model = NNDescent ( data , metric = self . metric , n_neighbors = self . n_neighbors ) self . model . prepare () Index the given data. Parameters Name Type Description Default data The data to index. required query ( self , query , n_neighbors = 1 ) \u00b6 Show source code in indexer/pynn.py 36 37 38 39 40 41 42 43 44 def query ( self , query , n_neighbors = 1 ): \"\"\" Query the index. Arguments: query: The query to query the index with. n_neighbors: The number of neighbors to return. \"\"\" return self . model . query ( query , n_neighbors ) Query the index. Parameters Name Type Description Default query The query to query the index with. required n_neighbors The number of neighbors to return. 1","title":"simsity.indexer"},{"location":"api/indexer/#simsityindexerpynndescentindexer","text":"An indexer based on PyNNDescent. Parameters Name Type Description Default metric The metric to use for the index. 'euclidean' n_neighbors The number of neighbors to use for the index. 10 Usage: from simsity.indexer import PyNNDescentIndexer indexer = PyNNDescentIndexer ( metric = \"euclidean\" , n_neighbors = 10 )","title":"simsity.indexer.PyNNDescentIndexer"},{"location":"api/indexer/#simsity.indexer.pynn.PyNNDescentIndexer.index","text":"Show source code in indexer/pynn.py 26 27 28 29 30 31 32 33 34 def index ( self , data ): \"\"\" Index the given data. Arguments: data: The data to index. \"\"\" self . model = NNDescent ( data , metric = self . metric , n_neighbors = self . n_neighbors ) self . model . prepare () Index the given data. Parameters Name Type Description Default data The data to index. required","title":"index()"},{"location":"api/indexer/#simsity.indexer.pynn.PyNNDescentIndexer.query","text":"Show source code in indexer/pynn.py 36 37 38 39 40 41 42 43 44 def query ( self , query , n_neighbors = 1 ): \"\"\" Query the index. Arguments: query: The query to query the index with. n_neighbors: The number of neighbors to return. \"\"\" return self . model . query ( query , n_neighbors ) Query the index. Parameters Name Type Description Default query The query to query the index with. required n_neighbors The number of neighbors to return. 1","title":"query()"},{"location":"api/service/","text":"from simsity.service import Service \u00b6 This object represents a nearest neighbor lookup service. You can pass it an encoder and a method to index the data. Parameters Name Type Description Default encoder A scikit-learn compatible encoder for the input. required indexer A compatible indexer for the nearest neighbor search. required storage A dictionary containing the data to be retreived with index. Meant to be ignored by humans. None Usage: from simsity.service import Service from simsity.indexer import PyNNDescentIndexer from sklearn.feature_extraction.text import CountVectorizer service = Service ( encoder = CountVectorizer (), indexer = PyNNDescentIndexer ( metric = \"euclidean\" ) ) load ( path ) (classmethod) \u00b6 Show source code in simsity/service.py 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 @classmethod def load ( cls , path ): \"\"\" Loads a service Arguments: path: Path to the folder to load the service from. \"\"\" if not pathlib . Path ( path ) . exists (): raise FileNotFoundError ( f \" { path } does not exist\" ) metadata_path = pathlib . Path ( path ) / \"metadata.json\" metadata = json . loads ( metadata_path . read_text ()) if metadata [ \"version\" ] != __version__ : raise RuntimeError ( f \"Version mismatch. Expected { __version__ } , got { metadata [ 'version' ] } \" ) storage_path = pathlib . Path ( path ) / \"storage.json\" storage = { int ( k ): v for k , v in json . loads ( storage_path . read_text ()) . items ()} encoder = load ( pathlib . Path ( path ) / \"encoder.joblib\" ) decoder = load ( pathlib . Path ( path ) / \"indexer.joblib\" ) service = cls ( encoder , decoder , storage ) service . _trained = True return service Loads a service Parameters Name Type Description Default path Path to the folder to load the service from. required query ( self , n_neighbors = 10 , ** kwargs ) \u00b6 Show source code in simsity/service.py 141 142 143 144 145 146 147 148 149 150 151 152 def query ( self , n_neighbors = 10 , ** kwargs ): \"\"\" Query the service \"\"\" if not self . _trained : raise RuntimeError ( \"Cannot save, Service is not trained.\" ) data = self . encoder . transform ( pd . DataFrame ([{ ** kwargs }])) idx , dist = self . indexer . query ( data , n_neighbors = n_neighbors ) return [ { \"item\" : self . storage [ idx [ 0 ][ i ]], \"dist\" : dist [ 0 ][ i ]} for i in range ( idx . shape [ 1 ]) ] Query the service query_text ( self , text , n_neighbors = 10 ) \u00b6 Show source code in simsity/service.py 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 def query_text ( self , text , n_neighbors = 10 ): \"\"\" Query the service ```python import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from simsity.service import Service from simsity.indexer import PyNNDescentIndexer service = Service( encoder=CountVectorizer(), indexer=PyNNDescentIndexer(metric=\"euclidean\") ) df = pd.read_csv(\"tests/data/clinc-data.csv\").head(100) service.train_text_from_dataf(df, text_col=\"text\") service.query_text(\"Hello there\", n_neighbors=10) ``` \"\"\" data = self . encoder . transform ([ text ]) idx , dist = self . indexer . query ( data , n_neighbors = n_neighbors ) return [ { \"item\" : self . storage [ idx [ 0 ][ i ]], \"dist\" : dist [ 0 ][ i ]} for i in range ( idx . shape [ 1 ]) ] Query the service import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from simsity.service import Service from simsity.indexer import PyNNDescentIndexer service = Service ( encoder = CountVectorizer (), indexer = PyNNDescentIndexer ( metric = \"euclidean\" ) ) df = pd . read_csv ( \"tests/data/clinc-data.csv\" ) . head ( 100 ) service . train_text_from_dataf ( df , text_col = \"text\" ) service . query_text ( \"Hello there\" , n_neighbors = 10 ) save ( self , path ) \u00b6 Show source code in simsity/service.py 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 def save ( self , path ): \"\"\" Save the service Arguments: path: Path to the folder to save the service to. \"\"\" if not self . _trained : raise RuntimeError ( \"Cannot save, Service is not trained.\" ) pathlib . Path ( path ) . mkdir ( parents = True , exist_ok = True ) storage_path = pathlib . Path ( path ) / \"storage.json\" storage_path . write_text ( json . dumps ( self . storage )) metadata_path = pathlib . Path ( path ) / \"metadata.json\" metadata_path . write_text ( json . dumps ({ \"version\" : __version__ })) dump ( self . encoder , pathlib . Path ( path ) / \"encoder.joblib\" ) dump ( self . indexer , pathlib . Path ( path ) / \"indexer.joblib\" ) Save the service Parameters Name Type Description Default path Path to the folder to save the service to. required train_from_dataf ( self , df , features = None ) \u00b6 Show source code in simsity/service.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 def train_from_dataf ( self , df , features = None ): \"\"\" Trains the service from a dataframe. Arguments: df: Pandas DataFrame that contains text to train the service with. features: Names of the features to encode. Usage: ```python import pandas as pd from simsity.service import Service from simsity.indexer import PyNNDescentIndexer from dirty_cat import GapEncoder df = pd.read_csv(\"tests/data/votes.csv\") service = Service( indexer=PyNNDescentIndexer(metric=\"euclidean\"), encoder=GapEncoder() ) service.train_from_dataf(df) res = service.query(name=\"khimerc thmas\", suburb=\"chariotte\", postcode=\"28273\", n_neighbors=3) pd.DataFrame([{**r['item'], 'dist': r['dist']} for r in res]) ``` \"\"\" subset = df if features : subset = df [ features ] self . storage = { i : r for i , r in enumerate ( subset . to_dict ( orient = \"records\" ))} data = self . encoder . fit_transform ( subset ) self . indexer . index ( data ) self . _trained = True return self Trains the service from a dataframe. Parameters Name Type Description Default df Pandas DataFrame that contains text to train the service with. required features Names of the features to encode. None Usage: import pandas as pd from simsity.service import Service from simsity.indexer import PyNNDescentIndexer from dirty_cat import GapEncoder df = pd . read_csv ( \"tests/data/votes.csv\" ) service = Service ( indexer = PyNNDescentIndexer ( metric = \"euclidean\" ), encoder = GapEncoder () ) service . train_from_dataf ( df ) res = service . query ( name = \"khimerc thmas\" , suburb = \"chariotte\" , postcode = \"28273\" , n_neighbors = 3 ) pd . DataFrame ([{ ** r [ 'item' ], 'dist' : r [ 'dist' ]} for r in res ]) train_text_from_dataf ( self , df , text_col = 'text' ) \u00b6 Show source code in simsity/service.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 def train_text_from_dataf ( self , df , text_col = \"text\" ): \"\"\" Trains the service from a dataframe assuming text as input. Arguments: df: Pandas DataFrame that contains text to train the service with. text_col: Name of the column containing text. Usage: ```python import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from simsity.service import Service from simsity.indexer import PyNNDescentIndexer service = Service( encoder=CountVectorizer(), indexer=PyNNDescentIndexer(metric=\"euclidean\") ) df = pd.read_csv(\"tests/data/clinc-data.csv\").head(100) service.train_text_from_dataf(df, text_col=\"text\") ``` \"\"\" texts = list ( df [ text_col ]) self . storage = { i : { \"text\" : t } for i , t in enumerate ( texts )} data = self . encoder . fit_transform ( texts ) self . indexer . index ( data ) self . _trained = True return self Trains the service from a dataframe assuming text as input. Parameters Name Type Description Default df Pandas DataFrame that contains text to train the service with. required text_col Name of the column containing text. 'text' Usage: import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from simsity.service import Service from simsity.indexer import PyNNDescentIndexer service = Service ( encoder = CountVectorizer (), indexer = PyNNDescentIndexer ( metric = \"euclidean\" ) ) df = pd . read_csv ( \"tests/data/clinc-data.csv\" ) . head ( 100 ) service . train_text_from_dataf ( df , text_col = \"text\" )","title":"simsity.service"},{"location":"api/service/#from-simsityservice-import-service","text":"This object represents a nearest neighbor lookup service. You can pass it an encoder and a method to index the data. Parameters Name Type Description Default encoder A scikit-learn compatible encoder for the input. required indexer A compatible indexer for the nearest neighbor search. required storage A dictionary containing the data to be retreived with index. Meant to be ignored by humans. None Usage: from simsity.service import Service from simsity.indexer import PyNNDescentIndexer from sklearn.feature_extraction.text import CountVectorizer service = Service ( encoder = CountVectorizer (), indexer = PyNNDescentIndexer ( metric = \"euclidean\" ) )","title":"from simsity.service import Service"},{"location":"api/service/#simsity.service.Service.load","text":"Show source code in simsity/service.py 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 @classmethod def load ( cls , path ): \"\"\" Loads a service Arguments: path: Path to the folder to load the service from. \"\"\" if not pathlib . Path ( path ) . exists (): raise FileNotFoundError ( f \" { path } does not exist\" ) metadata_path = pathlib . Path ( path ) / \"metadata.json\" metadata = json . loads ( metadata_path . read_text ()) if metadata [ \"version\" ] != __version__ : raise RuntimeError ( f \"Version mismatch. Expected { __version__ } , got { metadata [ 'version' ] } \" ) storage_path = pathlib . Path ( path ) / \"storage.json\" storage = { int ( k ): v for k , v in json . loads ( storage_path . read_text ()) . items ()} encoder = load ( pathlib . Path ( path ) / \"encoder.joblib\" ) decoder = load ( pathlib . Path ( path ) / \"indexer.joblib\" ) service = cls ( encoder , decoder , storage ) service . _trained = True return service Loads a service Parameters Name Type Description Default path Path to the folder to load the service from. required","title":"load()"},{"location":"api/service/#simsity.service.Service.query","text":"Show source code in simsity/service.py 141 142 143 144 145 146 147 148 149 150 151 152 def query ( self , n_neighbors = 10 , ** kwargs ): \"\"\" Query the service \"\"\" if not self . _trained : raise RuntimeError ( \"Cannot save, Service is not trained.\" ) data = self . encoder . transform ( pd . DataFrame ([{ ** kwargs }])) idx , dist = self . indexer . query ( data , n_neighbors = n_neighbors ) return [ { \"item\" : self . storage [ idx [ 0 ][ i ]], \"dist\" : dist [ 0 ][ i ]} for i in range ( idx . shape [ 1 ]) ] Query the service","title":"query()"},{"location":"api/service/#simsity.service.Service.query_text","text":"Show source code in simsity/service.py 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 def query_text ( self , text , n_neighbors = 10 ): \"\"\" Query the service ```python import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from simsity.service import Service from simsity.indexer import PyNNDescentIndexer service = Service( encoder=CountVectorizer(), indexer=PyNNDescentIndexer(metric=\"euclidean\") ) df = pd.read_csv(\"tests/data/clinc-data.csv\").head(100) service.train_text_from_dataf(df, text_col=\"text\") service.query_text(\"Hello there\", n_neighbors=10) ``` \"\"\" data = self . encoder . transform ([ text ]) idx , dist = self . indexer . query ( data , n_neighbors = n_neighbors ) return [ { \"item\" : self . storage [ idx [ 0 ][ i ]], \"dist\" : dist [ 0 ][ i ]} for i in range ( idx . shape [ 1 ]) ] Query the service import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from simsity.service import Service from simsity.indexer import PyNNDescentIndexer service = Service ( encoder = CountVectorizer (), indexer = PyNNDescentIndexer ( metric = \"euclidean\" ) ) df = pd . read_csv ( \"tests/data/clinc-data.csv\" ) . head ( 100 ) service . train_text_from_dataf ( df , text_col = \"text\" ) service . query_text ( \"Hello there\" , n_neighbors = 10 )","title":"query_text()"},{"location":"api/service/#simsity.service.Service.save","text":"Show source code in simsity/service.py 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 def save ( self , path ): \"\"\" Save the service Arguments: path: Path to the folder to save the service to. \"\"\" if not self . _trained : raise RuntimeError ( \"Cannot save, Service is not trained.\" ) pathlib . Path ( path ) . mkdir ( parents = True , exist_ok = True ) storage_path = pathlib . Path ( path ) / \"storage.json\" storage_path . write_text ( json . dumps ( self . storage )) metadata_path = pathlib . Path ( path ) / \"metadata.json\" metadata_path . write_text ( json . dumps ({ \"version\" : __version__ })) dump ( self . encoder , pathlib . Path ( path ) / \"encoder.joblib\" ) dump ( self . indexer , pathlib . Path ( path ) / \"indexer.joblib\" ) Save the service Parameters Name Type Description Default path Path to the folder to save the service to. required","title":"save()"},{"location":"api/service/#simsity.service.Service.train_from_dataf","text":"Show source code in simsity/service.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 def train_from_dataf ( self , df , features = None ): \"\"\" Trains the service from a dataframe. Arguments: df: Pandas DataFrame that contains text to train the service with. features: Names of the features to encode. Usage: ```python import pandas as pd from simsity.service import Service from simsity.indexer import PyNNDescentIndexer from dirty_cat import GapEncoder df = pd.read_csv(\"tests/data/votes.csv\") service = Service( indexer=PyNNDescentIndexer(metric=\"euclidean\"), encoder=GapEncoder() ) service.train_from_dataf(df) res = service.query(name=\"khimerc thmas\", suburb=\"chariotte\", postcode=\"28273\", n_neighbors=3) pd.DataFrame([{**r['item'], 'dist': r['dist']} for r in res]) ``` \"\"\" subset = df if features : subset = df [ features ] self . storage = { i : r for i , r in enumerate ( subset . to_dict ( orient = \"records\" ))} data = self . encoder . fit_transform ( subset ) self . indexer . index ( data ) self . _trained = True return self Trains the service from a dataframe. Parameters Name Type Description Default df Pandas DataFrame that contains text to train the service with. required features Names of the features to encode. None Usage: import pandas as pd from simsity.service import Service from simsity.indexer import PyNNDescentIndexer from dirty_cat import GapEncoder df = pd . read_csv ( \"tests/data/votes.csv\" ) service = Service ( indexer = PyNNDescentIndexer ( metric = \"euclidean\" ), encoder = GapEncoder () ) service . train_from_dataf ( df ) res = service . query ( name = \"khimerc thmas\" , suburb = \"chariotte\" , postcode = \"28273\" , n_neighbors = 3 ) pd . DataFrame ([{ ** r [ 'item' ], 'dist' : r [ 'dist' ]} for r in res ])","title":"train_from_dataf()"},{"location":"api/service/#simsity.service.Service.train_text_from_dataf","text":"Show source code in simsity/service.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 def train_text_from_dataf ( self , df , text_col = \"text\" ): \"\"\" Trains the service from a dataframe assuming text as input. Arguments: df: Pandas DataFrame that contains text to train the service with. text_col: Name of the column containing text. Usage: ```python import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from simsity.service import Service from simsity.indexer import PyNNDescentIndexer service = Service( encoder=CountVectorizer(), indexer=PyNNDescentIndexer(metric=\"euclidean\") ) df = pd.read_csv(\"tests/data/clinc-data.csv\").head(100) service.train_text_from_dataf(df, text_col=\"text\") ``` \"\"\" texts = list ( df [ text_col ]) self . storage = { i : { \"text\" : t } for i , t in enumerate ( texts )} data = self . encoder . fit_transform ( texts ) self . indexer . index ( data ) self . _trained = True return self Trains the service from a dataframe assuming text as input. Parameters Name Type Description Default df Pandas DataFrame that contains text to train the service with. required text_col Name of the column containing text. 'text' Usage: import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from simsity.service import Service from simsity.indexer import PyNNDescentIndexer service = Service ( encoder = CountVectorizer (), indexer = PyNNDescentIndexer ( metric = \"euclidean\" ) ) df = pd . read_csv ( \"tests/data/clinc-data.csv\" ) . head ( 100 ) service . train_text_from_dataf ( df , text_col = \"text\" )","title":"train_text_from_dataf()"},{"location":"quickstart/","text":"Work in progress.","title":"Quickstart"}]}